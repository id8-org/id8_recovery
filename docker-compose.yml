version: "3.9"

# All services now use the unified project root .env file for environment variables.
# Do not use per-service .env files. See .env at the project root.

services:
  db:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: ideas
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6379:6379"
    restart: unless-stopped

  backend:
    build:
      context: ./backend
    env_file:
      - .env
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      - ./backend:/app
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
    env_file:
      - .env
    ports:
      - "8081:8081"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8081/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  website:
    build:
      context: ./website
    environment:
      - NODE_ENV=production
      - PORT=4000
    ports:
      - "4000:3000"
    depends_on:
      - mailhog
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:4000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  mailhog:
    image: mailhog/mailhog:latest
    ports:
      - "1025:1025"  # SMTP server
      - "8025:8025"  # Web UI
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8025/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  cronjob:
    build:
      context: ./backend
    command: ["sh", "-c", "sleep 30 && python cron/nightly_runner.py"]
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      backend:
        condition: service_healthy
      redis:
        condition: service_started
    restart: "no"

volumes:
  db_data:
